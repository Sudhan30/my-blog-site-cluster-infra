name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BLOG: ${{ github.repository }}/blog-site
  IMAGE_NAME_BACKEND: ${{ github.repository }}/blog-backend

jobs:
  build-blog:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for blog
      id: meta-blog
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BLOG }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push blog image
      uses: docker/build-push-action@v5
      with:
        context: ./blog
        push: true
        tags: ${{ steps.meta-blog.outputs.tags }}
        labels: ${{ steps.meta-blog.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-flux:
    needs: [build-blog, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Notify Flux of new images
      run: |
        echo "New images built and pushed to GHCR:"
        echo "Blog: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BLOG }}:main-${{ github.sha }}"
        echo "Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:main-${{ github.sha }}"
        echo "Flux Image Automation will automatically update the manifests"

  deploy:
    needs: [notify-flux]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Wait for Flux sync
      run: |
        kubectl wait --for=condition=ready --timeout=300s kustomization/blog -n flux-system
        kubectl wait --for=condition=ready --timeout=300s kustomization/backend -n flux-system
        kubectl wait --for=condition=ready --timeout=300s kustomization/monitoring -n flux-system
    
    - name: Verify deployment
      run: |
        kubectl get pods -n web
        kubectl get deployments -n web
        kubectl get services -n web
    
    - name: Test API endpoints
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test health endpoints
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://blog-backend-service:3001/health || echo "Backend health check failed"
        
        # Test blog site
        kubectl run test-pod --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://blog-service:80/health || echo "Blog health check failed"
