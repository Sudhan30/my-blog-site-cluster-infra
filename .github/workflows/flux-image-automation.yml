name: Flux Image Automation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BLOG: ${{ github.repository }}/blog-site
  IMAGE_NAME_BACKEND: ${{ github.repository }}/blog-backend

jobs:
  build-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push blog image
      uses: docker/build-push-action@v5
      with:
        context: ./blog
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BLOG }}:main-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BLOG }}:latest
        labels: |
          org.opencontainers.image.title=Blog Site
          org.opencontainers.image.description=Blog site container
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:main-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
        labels: |
          org.opencontainers.image.title=Blog Backend
          org.opencontainers.image.description=Blog backend API container
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Update image tags in manifests
      run: |
        # Update blog image tag
        BLOG_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BLOG }}:main-${{ github.sha }}"
        sed -i "s|image: docker.io/sudhan03/blog-site:latest|image: ${BLOG_IMAGE}|g" clusters/prod/apps/blog/deployment.yaml
        
        # Update backend image tag
        BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:main-${{ github.sha }}"
        sed -i "s|image: ghcr.io/sudhan30/my-blog-site-cluster-infra/blog-backend:latest|image: ${BACKEND_IMAGE}|g" clusters/prod/apps/backend/deployment.yaml
        
        # Update imagePullPolicy to Always for new images
        sed -i "s|imagePullPolicy: IfNotPresent|imagePullPolicy: Always|g" clusters/prod/apps/blog/deployment.yaml
        sed -i "s|imagePullPolicy: IfNotPresent|imagePullPolicy: Always|g" clusters/prod/apps/backend/deployment.yaml
    
    - name: Commit and push changes
      run: |
        git config --global user.name "Flux Image Automation"
        git config --global user.email "flux@github.com"
        git add clusters/prod/apps/blog/deployment.yaml clusters/prod/apps/backend/deployment.yaml
        git diff --staged --quiet || git commit -m "Update image tags to ${{ github.sha }} [skip ci]"
        git push

  notify-flux:
    needs: [build-and-update]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Force Flux reconciliation
      run: |
        # Wait a bit for Git to be updated
        sleep 10
        
        # Force Flux to reconcile
        flux reconcile source git blog-repo -n flux-system || echo "Git reconciliation failed"
        flux reconcile kustomization blog -n flux-system || echo "Blog reconciliation failed"
        flux reconcile kustomization backend -n flux-system || echo "Backend reconciliation failed"
        flux reconcile kustomization monitoring -n flux-system || echo "Monitoring reconciliation failed"
    
    - name: Wait for deployment rollout
      run: |
        # Wait for deployments to be ready
        kubectl rollout status deployment/blog -n web --timeout=300s || echo "Blog rollout failed"
        kubectl rollout status deployment/blog-backend -n web --timeout=300s || echo "Backend rollout failed"
    
    - name: Verify deployment
      run: |
        echo "=== Pod Status ==="
        kubectl get pods -n web
        echo ""
        echo "=== Deployment Status ==="
        kubectl get deployments -n web
        echo ""
        echo "=== Service Status ==="
        kubectl get services -n web
        echo ""
        echo "=== Image Versions ==="
        kubectl get pods -n web -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.containers[0].image}{"\n"}{end}'
